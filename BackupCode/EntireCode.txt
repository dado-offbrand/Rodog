// Libraries
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <ESP32Servo.h>

// WiFi credentials
bool requestOngoing = false;
String incomingByte = "";

// Servo values
ESP32_Servo_h Servo testServo;
const int servoPin = 13;
String sliderValue = "0";

// Misc
const char* inputParameter = "value";
AsyncWebServer server(80);

// Web server HTML
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>ESP32 Brightness Control Web Server</title>
  <style>
    html {font-family: Times New Roman; display: inline-block; text-align: center;}
    h2 {font-size: 2.3rem;}
    p {font-size: 1.9rem;}
    body {max-width: 400px; margin:0px auto; padding-bottom: 25px;}
    .slider { -webkit-appearance: none; margin: 14px; width: 360px; height: 25px; background: #38c0ff  ;
      outline: none; -webkit-transition: .2s; transition: opacity .2s;}
    .slider::-webkit-slider-thumb {-webkit-appearance: none; appearance: none; width: 35px; height: 35px; background:#01070a; cursor: pointer;}
    .slider::-moz-range-thumb { width: 35px; height: 35px; background: #01070a; cursor: pointer; } 
  </style>
</head>
<body>
  <h2>ESP32 Servo Control Web Server</h2>
  <p><span id="textsliderValue">%SLIDERVALUE%</span></p>
  <p><input type="range" onchange="updateSliderPWM(this)" id="pwmSlider" min="0" max="180" value="%SLIDERVALUE%" step="1" class="slider"></p>
<script>
function updateSliderPWM(element) {
  var sliderValue = document.getElementById("pwmSlider").value;
  document.getElementById("textsliderValue").innerHTML = sliderValue;
  console.log(sliderValue);
  var xhr = new XMLHttpRequest();
  xhr.open("GET", "/slider?value="+sliderValue, true);
  xhr.send();
}
</script>
</body>
</html>
)rawliteral";

void setup(){
  Serial.begin(115200);

  //ESP32PWM::allocateTimer(0);
  //ESP32PWM::allocateTimer(1);
  //ESP32PWM::allocateTimer(2);
  //ESP32PWM::allocateTimer(3);
  //testServo.setPeriodHertz(50);
  testServo.attach(servoPin);

  Serial.println("Setup complete"); //debug print
}

String processor(const String& var){
  if (var == "SLIDERVALUE"){
    return sliderValue;
  }
  return String();
}

void moveServo(int sV) {
  //.. DEBUG STATEMENT
  Serial.println("request received");

  //.. TEST INFORMATION
  int cur = testServo.read();
  Serial.println(String(sV) + " :: " + String(cur));

  //.. MOVE SERVO IN DIRECTION
  if (sV < cur) {
    //move forwards (++)
    Serial.println("action: moving forwards");
    for (int i = cur; i <= sV; i++) {
      testServo.write(i);
      delay(15);
    }
  }
  else if (sV > cur) {
    // move backwards (--)
    Serial.println("action: moving backwards");
    for (int i = cur; i >= sV; i--) {
      testServo.write(i);
      delay(15);
    }
  }

  Serial.println("--------");

  testServo.write(sV);
  delay(200); // <- TEMPORARY DELAY
  requestOngoing = false;
}

void loop() {
  if (Serial.available() > 0) {
    incomingByte = Serial.readString();

    Serial.print("received: ");
    Serial.println(incomingByte);

    // Move servo command | moveServo:amount
    if (incomingByte.startsWith("moveServo"))
    {
      String sVS = incomingByte.substring(10, incomingByte.length());
      moveServo(sVS.toInt());
    }

    // Begin wifi command | beginWifi:ssid:pass | beginWifi:ssid:nopass
    if (incomingByte.startsWith("begin"))
    {
      int c1 = incomingByte.indexOf(":"); 
      int c2 = incomingByte.lastIndexOf(":");
      String ssidS = incomingByte.substring(c1+1, c2);
      String passwordS = incomingByte.substring(c2+1, incomingByte.length());

      // Debug statements
      Serial.println(ssidS);
      Serial.println(passwordS);

      if (!passwordS.equals("nopass")) {
        Serial.println("Connecting with parameter: pass");

        const char* ssid = ssidS.c_str();
        const char* password = passwordS.c_str();
        WiFi.begin(ssid, password);
      } else {
        Serial.println("Connecting with parameter: nopass");

        const char* ssid = ssidS.c_str();
        WiFi.begin(ssid); 
      }

      while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting...");
      }

      Serial.println(WiFi.localIP());
      Serial.println("--------");

      server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
        request->send_P(200, "text/html", index_html, processor);
      });

      server.on("/slider", HTTP_GET, [] (AsyncWebServerRequest *request) {
        String message;
        if (request->hasParam(inputParameter)) {
          message = request->getParam(inputParameter)->value();
          sliderValue = message;
        
          if (requestOngoing == false) { 
            requestOngoing = true; 
            moveServo(sliderValue.toInt()); 
            Serial.println("request sent"); // debug statement
          }
        } else {
          message = "No message sent";
        }
        
        Serial.println(message);
        request->send(200, "text/plain", "OK");
      });
      
      server.begin();
    } 
  }
}